#usda 1.0
(
	customLayerData = {
		string creator = "Needle Engine USDZExporter"
	}
	defaultPrim = "StageRoot"
	metersPerUnit = 1
	upAxis = "Y"
	startTimeCode = 0
	endTimeCode = 200
	timeCodesPerSecond = 60
	framesPerSecond = 60
)

def Xform "StageRoot"
{
	def Scope "Scenes" (
			kind = "sceneLibrary"
		)
	{
		def Xform "Scene" (
			apiSchemas = ["Preliminary_AnchoringAPI"]
			customData = {
				bool preliminary_collidesWithEnvironment = 0
				string sceneName = "Scene"
			}
			sceneName = "Scene"
		)
		{
			token preliminary:anchoring:type = "plane"
			token preliminary:planeAnchoring:alignment = "horizontal"
			
			def Xform "_11"
			{
				matrix4d xformOp:transform = ( (1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000), (0.0000000000, 1.0000000000, 0.0000000000, 0.0000000000), (0.0000000000, 0.0000000000, 1.0000000000, 0.0000000000), (0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000) )
				uniform token[] xformOpOrder = ["xformOp:transform"]
				
				def Xform "DropListener_18"
				{
					matrix4d xformOp:transform = ( (1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000), (0.0000000000, 1.0000000000, 0.0000000000, 0.0000000000), (0.0000000000, 0.0000000000, 1.0000000000, 0.0000000000), (0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000) )
					uniform token[] xformOpOrder = ["xformOp:transform"]
					
					def Xform "_142"
					{
						matrix4d xformOp:transform = ( (1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000), (0.0000000000, 1.0000000000, 0.0000000000, 0.0000000000), (0.0000000000, 0.0000000000, 1.0000000000, 0.0000000000), (0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000) )
						uniform token[] xformOpOrder = ["xformOp:transform"]
						
						def Xform "_144"
						{
							matrix4d xformOp:transform = ( (0.0099999998, 0.0000000000, 0.0000000000, 0.0000000000), (0.0000000000, 0.0099999998, 0.0000000000, 0.0000000000), (0.0000000000, 0.0000000000, 0.0099999998, 0.0000000000), (0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000) )
							uniform token[] xformOpOrder = ["xformOp:transform"]
							
							def Xform "translate" 
							{
								double3 xformOp:translate = (300, 0, 0)
    							uniform token[] xformOpOrder = ["xformOp:translate"]

								def Xform "LOD3spShape_145" (
									prepend references = @./geometries/Geometry_37.usd@</Geometry>
									prepend apiSchemas = ["MaterialBindingAPI"]
								)
								{
									rel material:binding = </StageRoot/Materials/DuckMaterial>
									matrix4d xformOp:transform = ( (1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000), (0.0000000000, 1.0000000000, 0.0000000000, 0.0000000000), (0.0000000000, 0.0000000000, 1.0000000000, 0.0000000000), (0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000) )
									uniform token[] xformOpOrder = ["xformOp:transform"]
								}
							}
							
						}
					}
				}
				def Xform "XRRig_19"
				{
					matrix4d xformOp:transform = ( (-1.0000000000, 0.0000000000, -0.0000000000, 0.0000000000), (0.0000000000, 1.0000000000, 0.0000000000, 0.0000000000), (0.0000000000, 0.0000000000, -1.0000000000, 0.0000000000), (0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000) )
					uniform token[] xformOpOrder = ["xformOp:transform"]
					
				}
			}
		}
	}
	def "Materials"
	{

		def Material "DuckMaterial"
		{
			def Shader "PreviewSurface"
			{
				uniform token info:id = "UsdPreviewSurface"
				color3f inputs:diffuseColor.connect = </StageRoot/Materials/DuckMaterial/Texture_17_diffuse.outputs:rgb>
				float inputs:opacity = 1
				color3f inputs:emissiveColor = (0, 0, 0)
				float inputs:roughness = 1
				float inputs:metallic = 0
				int inputs:useSpecularWorkflow = 0
				token outputs:surface
			}

			token outputs:surface.connect = </StageRoot/Materials/DuckMaterial/PreviewSurface.outputs:surface>

			def Shader "uvReader_st"
			{
				uniform token info:id = "UsdPrimvarReader_float2"
				token inputs:varname = "st"
				float2 inputs:fallback = (0.0, 0.0)
				float2 outputs:result
			}

			def Shader "uvReader_st2"
			{
				uniform token info:id = "UsdPrimvarReader_float2"
				token inputs:varname = "st2"
				float2 inputs:fallback = (0.0, 0.0)
				float2 outputs:result
			}


			
			def Shader "Texture_17_diffuse"
			{
				uniform token info:id = "UsdUVTexture"
				asset inputs:file = @textures/Texture_17_ffffff_1.png@
				token inputs:sourceColorSpace = "sRGB"
				float2 inputs:st.connect = </StageRoot/Materials/DuckMaterial/uvReader_st.outputs:result>
				
				token inputs:banana = "slice"
				token inputs:wrapS = "repeat"
				token inputs:wrapT = "repeat"
				float outputs:r
				float outputs:g
				float outputs:b
				float3 outputs:rgb
				
			}

		}

	}
}


