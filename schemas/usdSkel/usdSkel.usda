#usda 1.0
(
    endTimeCode = 10
    metersPerUnit = 0.1
    startTimeCode = 1
    upAxis = "Y"
)

def Xform "World"
{
    def SkelRoot "JointSkelRoot" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        prepend rel skel:animationSource = </World/JointSkelRoot/Animation>

        def Skeleton "Skeleton"
        {
            uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 2, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 4, 1) )]
            uniform token[] joints = ["Shoulder", "Shoulder/Elbow", "Shoulder/Elbow/Hand"]
            uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 2, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 2, 1) )]
        }

        def SkelAnimation "Animation"
        {
            uniform token[] joints = ["Shoulder/Elbow"]
            quatf[] rotations.timeSamples = {
                1: [(1, 0, 0, 0)],
                10: [(0.7071, 0.7071, 0, 0)],
            }
            half3[] scales = [(1, 1, 1)]
            float3[] translations = [(0, 0, 2)]
        }

        def Mesh "Mesh" (
            prepend apiSchemas = ["SkelBindingAPI"]
        )
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [2, 3, 1, 0, 6, 7, 5, 4, 8, 9, 7, 6, 3, 2, 9, 8, 10, 11, 4, 5, 0, 1, 11, 10, 7, 9, 10, 5, 9, 2, 0, 10, 3, 8, 11, 1, 8, 6, 4, 11]
            point3f[] points = [(2.5, -0.5, 4), (1.5, -0.5, 4), (2.5, 0.5, 4), (1.5, 0.5, 4), (1.5, -0.5, 0), (2.5, -0.5, 0), (1.5, 0.5, 0), (2.5, 0.5, 0), (1.5, 0.5, 2), (2.5, 0.5, 2), (2.5, -0.5, 2), (1.5, -0.5, 2)]
            matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            int[] primvars:skel:jointIndices = [2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1] (
                elementSize = 1
                interpolation = "vertex"
            )
            float[] primvars:skel:jointWeights = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                elementSize = 1
                interpolation = "vertex"
            )
            prepend rel skel:skeleton = </World/JointSkelRoot/Skeleton>
        }
    }

    def SkelRoot "MorphingTri" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        rel skel:skeleton = </World/MorphingTri/Skel>
        def Skeleton "Skel" {}

        rel skel:animationSource = </World/MorphingTri/Anim>
        def SkelAnimation "Anim"
        {
            uniform token[] blendShapes = ["iso", "right"]
            float[] blendShapeWeights.timeSamples = {
                1: [0, 0],
                3: [1, 0],
                5: [0, 0],
                7: [0, 1],
                10: [1, 1],
            }
        }

        def Mesh "Mesh" (
            prepend apiSchemas = ["SkelBindingAPI"]
        )
        {
            point3f[] points = [(0.5, 0, 0), (0, 0.8660254, 0), (-0.5, 0, 0)]

            uniform token[] skel:blendShapes = ["iso", "right"]
            rel skel:blendShapeTargets = [
                </World/MorphingTri/Mesh/iso>,
                </World/MorphingTri/Mesh/right>,
            ]
            def BlendShape "iso"
            {
                uniform vector3f[] offsets = [(0, 0.8660254, 0)]
                uniform int[] pointIndices = [1]
            }
            def BlendShape "right"
            {
                uniform vector3f[] offsets = [(-0.5, 0.1339746, 0)]
                uniform int[] pointIndices = [1]
            }


            float3[] extent = [(-0.5, 0, 0), (0.5, 0.8660254, 0)]
            int[] faceVertexCounts = [3]
            int[] faceVertexIndices = [0, 1, 2]
        }
    }
}

